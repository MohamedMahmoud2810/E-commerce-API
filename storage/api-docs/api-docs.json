{
    "openapi": "3.0.0",
    "info": {
        "title": "L5 OpenApi",
        "description": "L5 Swagger OpenApi description",
        "version": "1.0.0"
    },
    "paths": {
        "/api/auth/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "description": "Registers a new user and sends an email verification link.",
                "operationId": "registerUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully. Please check your email to verify your account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User registered successfully. Please check your email to verify your account."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Login a user",
                "description": "Logs in a user and returns a JWT token.",
                "operationId": "loginUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "access_token": {
                                            "type": "string"
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "bearer"
                                        },
                                        "expires_in": {
                                            "type": "integer",
                                            "example": 3600
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Logout a user",
                "description": "Logs out the user by invalidating their JWT token.",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully logged out"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to logout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to logout"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/categories": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Get list of categories",
                "description": "Returns a list of categories",
                "operationId": "getCategories",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Category"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "Category"
                ],
                "summary": "Create new category",
                "description": "Creates a new category",
                "operationId": "createCategory",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Electronics"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The name field is required."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/categories/{id}": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Get category by ID",
                "description": "Returns a specific category by ID",
                "operationId": "getCategoryById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Category"
                ],
                "summary": "Update category",
                "description": "Updates an existing category by ID",
                "operationId": "updateCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Category Name"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Category"
                ],
                "summary": "Delete category",
                "description": "Deletes an existing category by ID",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category deleted"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Category not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/notifications": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Get user notifications",
                "description": "Fetch all notifications and unread notifications for the authenticated user.",
                "operationId": "getNotifications",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "notifications": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Notification"
                                            }
                                        },
                                        "unread_notifications": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Notification"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/notifications/mark-as-read": {
            "post": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Mark all notifications as read",
                "description": "Marks all unread notifications for the authenticated user as read.",
                "operationId": "markNotificationsAsRead",
                "responses": {
                    "200": {
                        "description": "Notifications marked as read",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Notifications marked as read"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/orders": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get list of orders",
                "description": "Returns list of orders for the authenticated user",
                "operationId": "2cd7e03021e72d9d799c12dfe179c865",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "Orders"
                ],
                "summary": "Create a new order",
                "description": "Creates a new order for the authenticated user",
                "operationId": "d690d6834318e9b064df441e854de8b9",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreOrderDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResource"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/orders/{id}": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "summary": "Get order details",
                "description": "Returns order details for the given ID",
                "operationId": "c29621029e70f65247909d3e09031118",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Order ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/orders/{id}/cancel": {
            "post": {
                "tags": [
                    "Orders"
                ],
                "summary": "Cancel an order",
                "description": "Cancels an order with the given ID if it's pending",
                "operationId": "0181d49c16608e41e0f43658716300de",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Order ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order canceled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Only pending orders can be canceled"
                    }
                }
            }
        },
        "/api/orders/{id}/status": {
            "patch": {
                "tags": [
                    "Orders"
                ],
                "summary": "Update order status",
                "description": "Updates the status of an order",
                "operationId": "cbee5c99370628f7a4a9e10c9efcca5c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Order ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "status": {
                                        "description": "New status of the order",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Order status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderResource"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/create-payment-intent": {
            "post": {
                "tags": [
                    "Payments"
                ],
                "summary": "Create a payment intent",
                "description": "Create a payment intent with Stripe, required for client-side payment confirmation.",
                "operationId": "createPaymentIntent",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "amount"
                                ],
                                "properties": {
                                    "amount": {
                                        "description": "Amount in cents (e.g., $10 is 1000 cents)",
                                        "type": "integer",
                                        "example": 1000
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment intent created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "client_secret": {
                                            "type": "string",
                                            "example": "sk_test_4eC39HqLyjWDarjtT1zdp7dc"
                                        },
                                        "payment_intent_id": {
                                            "type": "string",
                                            "example": "pi_1FJzFG2eZvKYlo2C0z8h5TuQ"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request data"
                    }
                }
            }
        },
        "/api/confirm-payment": {
            "post": {
                "tags": [
                    "Payments"
                ],
                "summary": "Confirm a payment",
                "description": "Confirm a payment intent with the provided payment method.",
                "operationId": "confirmPayment",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "payment_intent_id",
                                    "payment_method"
                                ],
                                "properties": {
                                    "payment_intent_id": {
                                        "description": "Payment Intent ID from create-payment-intent response",
                                        "type": "string",
                                        "example": "pi_1FJzFG2eZvKYlo2C0z8h5TuQ"
                                    },
                                    "payment_method": {
                                        "description": "Payment method ID used for confirmation",
                                        "type": "string",
                                        "example": "pm_card_visa"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment confirmed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "The status of the payment intent",
                                            "type": "string",
                                            "example": "succeeded"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request data"
                    }
                }
            }
        },
        "/api/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get list of products",
                "description": "Returns list of products",
                "operationId": "getProductsList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Store new product",
                "description": "Creates a new product",
                "operationId": "storeProduct",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "price",
                                    "stock",
                                    "description",
                                    "category_id",
                                    "tag_id",
                                    "vendor_id"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "price": {
                                        "type": "number"
                                    },
                                    "stock": {
                                        "type": "integer"
                                    },
                                    "description": {
                                        "type": "string"
                                    },
                                    "category_id": {
                                        "type": "integer"
                                    },
                                    "tag_id": {
                                        "type": "integer"
                                    },
                                    "vendor_id": {
                                        "type": "integer"
                                    },
                                    "images": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation Error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/products/{id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get product details",
                "description": "Returns product details by ID",
                "operationId": "showProduct",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Products"
                ],
                "summary": "Update an existing product",
                "description": "Allows authorized users to update an existing product",
                "operationId": "6a7e11900844cd85cff66e662b82bd4c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Product Name"
                                    },
                                    "price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": "99.99"
                                    },
                                    "stock": {
                                        "type": "integer",
                                        "example": "20"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated Product Description"
                                    },
                                    "category_id": {
                                        "type": "integer",
                                        "example": "1"
                                    },
                                    "tag_id": {
                                        "type": "integer",
                                        "example": "2"
                                    },
                                    "vendor_id": {
                                        "type": "integer",
                                        "example": "3"
                                    },
                                    "images": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "500": {
                        "description": "Failed to update product"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Products"
                ],
                "summary": "Delete a product",
                "description": "Allows authorized users to delete a product",
                "operationId": "e80a6ca46716acee6b47ea1ac91663c0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product and its images deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Product not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/products/search": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Search for products",
                "description": "Search for products based on name, description, category, tag, vendor, or price",
                "operationId": "33867295f3d0876f2cb47a1e6da11e02",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Product"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No products found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/products/filter": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Filter products",
                "description": "Filter products by name, category, price range, rating, and stock status",
                "operationId": "80abea5651593a5d4a8a36a1511515e5",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Search query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "Category ID to filter",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "min_price",
                        "in": "query",
                        "description": "Minimum price",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "max_price",
                        "in": "query",
                        "description": "Maximum price",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "rating",
                        "in": "query",
                        "description": "Minimum rating",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "in_stock",
                        "in": "query",
                        "description": "Whether the product is in stock (true or false)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Sort by price (asc/desc) or rating",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "price_asc",
                                "price_desc",
                                "rating"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Filtered products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Product"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No products found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/products/{productId}/reviews": {
            "get": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Get all reviews and average rating for a product",
                "description": "Fetch all approved reviews and the average rating for a specific product. Reviews are cached to improve performance.",
                "operationId": "getProductReviews",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "reviews": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Review"
                                            }
                                        },
                                        "average_rating": {
                                            "description": "Average rating of the product",
                                            "type": "number",
                                            "format": "float",
                                            "example": 4.5
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Submit a review for a product",
                "description": "Allow authenticated users to submit a review for a product. The review is checked for spam, and the product owner is notified if it's approved.",
                "operationId": "storeReview",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "review",
                                    "rating"
                                ],
                                "properties": {
                                    "review": {
                                        "description": "Text content of the review",
                                        "type": "string",
                                        "example": "Great product!"
                                    },
                                    "rating": {
                                        "description": "Rating given by the user (1 to 5)",
                                        "type": "integer",
                                        "example": 5
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Review submitted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Review submitted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/reviews/pending": {
            "get": {
                "tags": [
                    "Review Moderation"
                ],
                "summary": "Get all pending reviews",
                "description": "Fetches all reviews that are pending for moderation.",
                "operationId": "getPendingReviews",
                "responses": {
                    "200": {
                        "description": "List of pending reviews",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Review"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/reviews/{reviewId}/approve": {
            "post": {
                "tags": [
                    "Review Moderation"
                ],
                "summary": "Approve a review",
                "description": "Updates the status of a review to 'approved'.",
                "operationId": "approveReview",
                "parameters": [
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "ID of the review to be approved",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review approved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Review approved successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Review not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/reviews/{reviewId}/reject": {
            "post": {
                "tags": [
                    "Review Moderation"
                ],
                "summary": "Reject a review",
                "description": "Updates the status of a review to 'rejected'.",
                "operationId": "rejectReview",
                "parameters": [
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "ID of the review to be rejected",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review rejected successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Review rejected successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Review not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/users/{id}/roles/assign": {
            "post": {
                "tags": [
                    "Role Management"
                ],
                "summary": "Assign a role to a user",
                "description": "Assigns a specified role to a user.",
                "operationId": "assignRole",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to assign the role to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "role"
                                ],
                                "properties": {
                                    "role": {
                                        "description": "The role to assign to the user",
                                        "type": "string",
                                        "example": "admin"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Role assigned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Role assigned successfully"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/UserWithRoles"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or user not found"
                    }
                }
            }
        },
        "/api/users/{id}/roles/remove": {
            "post": {
                "tags": [
                    "Role Management"
                ],
                "summary": "Remove a role from a user",
                "description": "Removes a specified role from a user.",
                "operationId": "removeRole",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to remove the role from",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "role"
                                ],
                                "properties": {
                                    "role": {
                                        "description": "The role to remove from the user",
                                        "type": "string",
                                        "example": "admin"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Role removed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Role removed successfully"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/UserWithRoles"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input or user does not have the specified role"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/api/users/me/roles": {
            "get": {
                "tags": [
                    "Role Management"
                ],
                "summary": "Get roles of the currently authenticated user",
                "description": "Retrieves the roles associated with the currently authenticated user.",
                "operationId": "getUserRoles",
                "responses": {
                    "200": {
                        "description": "Roles retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "roles": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "admin"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/tags": {
            "get": {
                "tags": [
                    "Tag Management"
                ],
                "summary": "List all tags",
                "description": "Retrieves a list of all tags.",
                "operationId": "indexTags",
                "responses": {
                    "200": {
                        "description": "List of tags",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Tag"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Tag Management"
                ],
                "summary": "Create a new tag",
                "description": "Creates a new tag with the provided data.",
                "operationId": "storeTag",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "The name of the tag",
                                        "type": "string",
                                        "example": "New Tag"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tag created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/tags/{id}": {
            "get": {
                "tags": [
                    "Tag Management"
                ],
                "summary": "Get a specific tag",
                "description": "Retrieves the tag with the specified ID.",
                "operationId": "showTag",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the tag to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tag"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tag not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Tag Management"
                ],
                "summary": "Update a tag",
                "description": "Updates the tag with the specified ID.",
                "operationId": "updateTag",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the tag to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The updated name of the tag",
                                        "type": "string",
                                        "example": "Updated Tag"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tag updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "404": {
                        "description": "Tag not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tag Management"
                ],
                "summary": "Delete a tag",
                "description": "Deletes the tag with the specified ID.",
                "operationId": "destroyTag",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the tag to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Tag deleted"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tag not found"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "StoreOrderDTO": {
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "product_id": {
                                    "type": "integer"
                                },
                                "quantity": {
                                    "type": "integer"
                                },
                                "price": {
                                    "type": "number",
                                    "format": "float"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "Category": {
                "title": "Category",
                "required": [
                    "name"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Electronics"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-09-10T10:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-09-10T10:00:00Z"
                    }
                },
                "type": "object"
            },
            "Notification": {
                "title": "Notification",
                "required": [
                    "id",
                    "type",
                    "data",
                    "read_at",
                    "created_at"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "1d9a7e91-53e1-401b-b4e7-4c5cf0c6a435"
                    },
                    "type": {
                        "type": "string",
                        "example": "App\\Notifications\\OrderShipped"
                    },
                    "data": {
                        "type": "object",
                        "example": {
                            "order_id": "12345",
                            "order_status": "shipped"
                        }
                    },
                    "read_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-09-11T12:30:00Z",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-09-11T12:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-09-11T12:10:00Z"
                    }
                },
                "type": "object"
            },
            "OrderDetail": {
                "title": "Order Detail",
                "description": "Order detail information for products in an order",
                "properties": {
                    "id": {
                        "description": "ID of the order detail",
                        "type": "integer",
                        "example": 1
                    },
                    "order_id": {
                        "description": "ID of the related order",
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "description": "ID of the product",
                        "type": "integer",
                        "example": 12
                    },
                    "quantity": {
                        "description": "Quantity of the product ordered",
                        "type": "integer",
                        "example": 3
                    },
                    "price": {
                        "description": "Price of the product",
                        "type": "number",
                        "format": "float",
                        "example": 99.99
                    },
                    "total": {
                        "description": "Total cost for the product (quantity * price)",
                        "type": "number",
                        "format": "float",
                        "example": 299.97
                    },
                    "created_at": {
                        "description": "Timestamp of when the order detail was created",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-09-10T15:03:27.000000Z"
                    },
                    "updated_at": {
                        "description": "Timestamp of when the order detail was last updated",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-09-10T15:03:27.000000Z"
                    }
                },
                "type": "object"
            },
            "Product": {
                "title": "Product",
                "description": "Product model",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Sample Product"
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 99.99
                    },
                    "description": {
                        "type": "string",
                        "example": "Product description here"
                    },
                    "stock": {
                        "type": "integer",
                        "example": 50
                    },
                    "category_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "tag_id": {
                        "type": "integer",
                        "example": 2
                    },
                    "vendor_id": {
                        "type": "integer",
                        "example": 3
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-09-01T12:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-09-01T12:00:00Z"
                    }
                },
                "type": "object"
            },
            "Review": {
                "title": "Review",
                "description": "Review model",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "description": "The ID of the product being reviewed",
                        "type": "integer",
                        "example": 123
                    },
                    "user_id": {
                        "description": "The ID of the user who submitted the review",
                        "type": "integer",
                        "example": 456
                    },
                    "review": {
                        "description": "The text content of the review",
                        "type": "string",
                        "example": "This product is excellent!"
                    },
                    "rating": {
                        "description": "The rating given to the product, on a scale of 1 to 5",
                        "type": "integer",
                        "example": 5
                    },
                    "is_spam": {
                        "description": "Indicates if the review is flagged as spam",
                        "type": "boolean",
                        "example": false
                    },
                    "status": {
                        "description": "The status of the review (e.g., approved, pending)",
                        "type": "string",
                        "example": "approved"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-09-01T12:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-09-01T12:00:00Z"
                    }
                },
                "type": "object"
            },
            "UserWithRoles": {
                "title": "User with Roles",
                "description": "User model with roles included",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "type": "string",
                        "example": "john.doe@example.com"
                    },
                    "roles": {
                        "description": "Roles assigned to the user",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "admin"
                        }
                    }
                },
                "type": "object"
            },
            "Tag": {
                "title": "Tag",
                "description": "Tag model",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Sample Tag"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-09-01T12:00:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-09-01T12:00:00Z"
                    }
                },
                "type": "object"
            },
            "OrderResource": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "orderDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderDetail"
                        }
                    }
                },
                "type": "object"
            }
        }
    },
    "tags": [
        {
            "name": "Review Moderation",
            "description": "Endpoints for moderating reviews"
        },
        {
            "name": "Auth",
            "description": "Auth"
        },
        {
            "name": "Category",
            "description": "Category"
        },
        {
            "name": "Notifications",
            "description": "Notifications"
        },
        {
            "name": "Orders",
            "description": "Orders"
        },
        {
            "name": "Payments",
            "description": "Payments"
        },
        {
            "name": "Products",
            "description": "Products"
        },
        {
            "name": "Reviews",
            "description": "Reviews"
        },
        {
            "name": "Role Management",
            "description": "Role Management"
        },
        {
            "name": "Tag Management",
            "description": "Tag Management"
        }
    ]
}